#include <iostream>
#include <cstdlib>
#include <cstring>
#include <map>
#include <vector>
#include <string>
#include <iomanip>
#include <cstdint>
#include <algorithm> // For std::fill
#include <iostream>   // For input/output operations
#include <vector>     // For std::vector
#include <string>     // For std::string
#include <sstream>    // For std::stringstream
#include <iomanip>    // For std::setprecision and formatting
#include <cstdlib>    // For std::rand, std::srand, and general utilities
#include <cmath>      // For mathematical functions
#include <chrono>     // For time-related utilities
#include <bitset>     // For binary manipulation with std::bitset

#include <cuda_runtime_api.h>
#include "xmp.h"

#ifdef _WIN32
#include <windows.h>
#else
#include <sys/time.h>
#endif

// Timer function
static double wallclock()
{
#ifdef _WIN32
    LARGE_INTEGER freq, counter;
    QueryPerformanceFrequency(&freq);
    QueryPerformanceCounter(&counter);
    return static_cast<double>(counter.QuadPart) / static_cast<double>(freq.QuadPart);
#else
    struct timeval tv;
    gettimeofday(&tv, nullptr);
    return static_cast<double>(tv.tv_sec) + static_cast<double>(tv.tv_usec) / 1e6;
#endif
}

#define XMP_CHECK_ERROR(fun)                                                                                  \
    {                                                                                                         \
        xmpError_t error = fun;                                                                               \
        if (error != xmpErrorSuccess)                                                                         \
        {                                                                                                     \
            if (error == xmpErrorCuda)                                                                        \
                printf("CUDA Error %s, %s:%d\n", cudaGetErrorString(cudaGetLastError()), __FILE__, __LINE__); \
            else                                                                                              \
                printf("XMP Error %s, %s:%d\n", xmpGetErrorString(error), __FILE__, __LINE__);                \
            exit(EXIT_FAILURE);                                                                               \
        }                                                                                                     \
    }

// // Constants
// constexpr int KEY_BITS = 2048;
// constexpr int HALF_KEY_BITS = KEY_BITS / 2;

// // Memory size calculations
// constexpr uint32_t FULL_KEY_SIZE_WORDS = KEY_BITS / 8 / sizeof(uint32_t);
// constexpr uint32_t HALF_KEY_SIZE_WORDS = (FULL_KEY_SIZE_WORDS + 1) / 2; // Rounded up
// constexpr size_t FULL_KEY_SIZE_BYTES = FULL_KEY_SIZE_WORDS * sizeof(uint32_t);
// constexpr size_t HALF_KEY_SIZE_BYTES = FULL_KEY_SIZE_BYTES / 2;

class CudaVariableManager
{
public:
    // Constructor: initializes variables and allocates memory
    CudaVariableManager(uint32_t fullKeySizeBits)
        : fullKeySizeBits_(fullKeySizeBits),
          fullKeySizeBytes_(fullKeySizeBits_ / 8),
          fullKeySizeWords_(fullKeySizeBytes_ / sizeof(uint32_t)),
          halfKeyBits_(fullKeySizeBits_ / 2)
    {
        XMP_CHECK_ERROR(xmpHandleCreate(&xmpHandle_));
    }

    // Destructor: ensures proper cleanup
    ~CudaVariableManager()
    {
        clear();
        XMP_CHECK_ERROR(xmpHandleDestroy(xmpHandle_));
    }

    void importBitString(std::vector<uint32_t> &data, const std::string &bitString)
    {
        const size_t bitsPerElement = 32; // Number of bits per uint32_t

        // Ensure the bitString's size is a multiple of 32 by padding with zeros if necessary
        size_t paddedSize = ((bitString.size() + bitsPerElement - 1) / bitsPerElement) * bitsPerElement;
        std::string paddedBitString = std::string(paddedSize - bitString.size(), '0') + bitString;

        // Convert each 32-bit chunk of the bit string into a uint32_t value
        for (size_t i = 0; i < paddedSize; i += bitsPerElement)
        {
            std::string chunk = paddedBitString.substr(i, bitsPerElement);
            uint32_t value = static_cast<uint32_t>(std::bitset<32>(chunk).to_ulong());
            data.push_back(value);
        }

        // Reverse the vector because the input bit string represents numbers in reverse order
        std::reverse(data.begin(), data.end());
    }

    // Add a new variable (allocates memory for host and CUDA)
    auto addVariable(const std::string &key, std::string varString="", uint32_t bits = 0)
    {
        if (cudaVars_.find(key) != cudaVars_.end())
        {
            std::cout << "Variable already exists: " + key << std::endl;
            throw std::runtime_error("Variable already exists: " + key);
        }

        // Calculate the size dynamically
        if (bits == 0)
            bits = fullKeySizeBits_;

        if (varString.length() != bits){
            if(bits>varString.length()){                
                auto tmp = std::string(bits-varString.length(), '0'); 
                varString = tmp + varString;
            }
            else{
                varString = std::string(varString.begin() + bits, varString.end());
            }
        }

        if (bits != varString.length())
        {
            std::cout << "size != varString.length()" << std::endl;
            throw std::runtime_error("size != varString.length()");
        }
            
        hostTmp_.resize((bits / 8 / sizeof(uint32_t)), 0);
        importBitString(hostTmp_, varString);

        // Allocate CUDA variable
        auto cudaVar = std::make_shared<xmpIntegers_t>();
        XMP_CHECK_ERROR(xmpIntegersCreate(xmpHandle_, &(*cudaVar), bits, 1));
        
        // std::cout << key << ": " << bits << std::endl;
        XMP_CHECK_ERROR(xmpIntegersImport(xmpHandle_, *cudaVar, (uint32_t)(bits / 8 / sizeof(uint32_t)), -1, sizeof(uint32_t), 0, 0, hostTmp_.data(), 1));
        cudaVars_[key] = cudaVar;
        return cudaVar;
    }

    // Get CUDA variable handle
    auto getCudaVariable(const std::string &key) const
    {
        auto it = cudaVars_.find(key);
        if (it == cudaVars_.end())
        {
            std::cout << "CUDA variable not found: " + key << std::endl;
            throw std::runtime_error("CUDA variable not found: " + key);
        }
        return it->second;
    }

    std::string binaryToBitString(const std::vector<uint32_t> &data)
    {
        size_t size = data.size();
        std::ostringstream bitStream;
        for (size_t i = 0; i < size; ++i)
        {
            // Convert each uint32_t value to a 32-bit binary string
            bitStream << std::bitset<32>(data[size - i - 1]);
        }
        return bitStream.str();
    }

    auto exportCudaVariable(const std::string &key)
    {
        auto var = getCudaVariable(key);
        hostTmp_.resize(fullKeySizeWords_, 0);
        std::fill(hostTmp_.begin(), hostTmp_.end(), 0);
        auto array = hostTmp_.data();
        auto arraySize = hostTmp_.size();

        uint32_t fullKeySizeWords = fullKeySizeWords_;
        XMP_CHECK_ERROR(xmpIntegersExport(xmpHandle_, hostTmp_.data(), &fullKeySizeWords, -1, sizeof(uint32_t), 0, 0, *var, 1));

        std::string varString = binaryToBitString(hostTmp_);
        return varString;
    }
    // Perform multiplication on two CUDA variables
    void mulVariables(const std::string &keyResult, const std::string &keyA, const std::string &keyB)
    {

        // Get handles for the input variables
        auto varA = getCudaVariable(keyA);
        auto varB = getCudaVariable(keyB);

        // Create a new CUDA variable for the result
        auto varResult = addVariable(keyResult);

        // Perform the multiplication operation
        XMP_CHECK_ERROR(xmpIntegersMul(xmpHandle_, *varResult, *varA, *varB, 1));

        // Store the result variable
        cudaVars_[keyResult] = varResult;
    }

    // Function to perform RSA encryption
    void rsaEncrypt(const std::string &keyResult, const std::string &keyPlaintext,
                    const std::string &keyPublicExponent, const std::string &keyPublicModulus,
                    uint32_t totalMessages = 1)
    {
        // Retrieve required variables
        auto plaintext = getCudaVariable(keyPlaintext);
        auto publicExponent = getCudaVariable(keyPublicExponent);
        auto publicModulus = getCudaVariable(keyPublicModulus);

        // Create a new CUDA variable for the ciphertext result
        auto ciphertext = addVariable(keyResult);

        // Perform RSA encryption: ciphertext = (plaintext ^ publicExponent) % publicModulus
        XMP_CHECK_ERROR(xmpIntegersPowm(xmpHandle_, *ciphertext, *plaintext, *publicExponent, *publicModulus, totalMessages));

        // Store the result variable
        cudaVars_[keyResult] = ciphertext;
    }

    // Function to perform RSA decryption
    void rsaDecrypt(const std::string &keyResult, const std::string &keyCiphertext,
                    const std::string &keyPrimeP, const std::string &keyPrimeQ,
                    const std::string &keyDp, const std::string &keyDq,
                    const std::string &keyCoefficientP, const std::string &keyCoefficientQ,
                    const std::string &keyPublicModulus, uint32_t totalMessages = 1)
    {
        
        // std::cout << "Retrieve required variables" << std::endl;
        auto ciphertext = getCudaVariable(keyCiphertext);
        auto primeP = getCudaVariable(keyPrimeP);
        auto primeQ = getCudaVariable(keyPrimeQ);
        auto dp = getCudaVariable(keyDp);
        auto dq = getCudaVariable(keyDq);
        auto coefficientP = getCudaVariable(keyCoefficientP);
        auto coefficientQ = getCudaVariable(keyCoefficientQ);
        auto publicModulus = getCudaVariable(keyPublicModulus);

        // std::cout << "Allocate memory for temporary variables" << std::endl;
        auto scratchSpaceResult =   addVariable("scratchSpaceResult", "", halfKeyBits_);
        auto partialPlainP =        addVariable("partialPlainP", "", halfKeyBits_);
        auto partialPlainQ =        addVariable("partialPlainQ", "", halfKeyBits_);
        auto partialCipherP =       addVariable("partialCipherP", "", fullKeySizeBits_ + halfKeyBits_);
        auto partialCipherQ =       addVariable("partialCipherQ", "", fullKeySizeBits_ + halfKeyBits_);
        auto result =               addVariable(keyResult, "", fullKeySizeBits_);

        // std::cout << "RSA decryption steps" << std::endl;    
        // std::cout << "Step 1: scratchSpaceResult = ciphertext mod primeP" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersMod(xmpHandle_, *scratchSpaceResult, *ciphertext, *primeP, totalMessages));

        
        // std::cout << "Step 2: partialPlainP = (scratchSpaceResult ^ dp) mod primeP" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersPowm(xmpHandle_, *partialPlainP, *scratchSpaceResult, *dp, *primeP, totalMessages));

        
        // std::cout << "Step 3: scratchSpaceResult = ciphertext mod primeQ" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersMod(xmpHandle_, *scratchSpaceResult, *ciphertext, *primeQ, totalMessages));

        
        // std::cout << "Step 4: partialPlainQ = (scratchSpaceResult ^ dq) mod primeQ" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersPowm(xmpHandle_, *partialPlainQ, *scratchSpaceResult, *dq, *primeQ, totalMessages));

        
        // std::cout << "Step 5: partialCipherP = partialPlainP * coefficientP" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersMul(xmpHandle_, *partialCipherP, *partialPlainP, *coefficientP, totalMessages));

        
        // std::cout << "Step 6: partialCipherQ = partialPlainQ * coefficientQ" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersMul(xmpHandle_, *partialCipherQ, *partialPlainQ, *coefficientQ, totalMessages));

        
        // std::cout << "Step 7: partialCipherP = partialCipherP + partialCipherQ" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersAdd(xmpHandle_, *partialCipherP, *partialCipherP, *partialCipherQ, totalMessages));

        
        // std::cout << "Step 8: result = partialCipherP mod publicModulus" << std::endl;
        XMP_CHECK_ERROR(xmpIntegersMod(xmpHandle_, *result, *partialCipherP, *publicModulus, totalMessages));

        
        // std::cout << "Cleanup temporary variables" << std::endl;
        removeVariable("scratchSpaceResult");
        removeVariable("partialPlainP");
        removeVariable("partialPlainQ");
        removeVariable("partialCipherP");
        removeVariable("partialCipherQ");
    }

    // Remove a variable (deallocates memory)
    void removeVariable(const std::string &key)
    {
        // Remove CUDA variable
        auto it = cudaVars_.find(key);
        if (it != cudaVars_.end())
        {
            XMP_CHECK_ERROR(xmpIntegersDestroy(xmpHandle_, *it->second));
            cudaVars_.erase(it);
        }
    }

    void clear()
    {
        // Clean up all managed CUDA variables
        for (auto it = cudaVars_.begin(); it != cudaVars_.end();)
        {
            XMP_CHECK_ERROR(xmpIntegersDestroy(xmpHandle_, *it->second));
            it = cudaVars_.erase(it);
        }
    }

private:
    xmpHandle_t xmpHandle_;                                          // Handle for xmp functions
    uint32_t fullKeySizeBits_, fullKeySizeBytes_, fullKeySizeWords_, halfKeyBits_;   // Size in words
    std::vector<uint32_t> hostTmp_;                                  // Managed hostVar array
    std::map<std::string, std::shared_ptr<xmpIntegers_t>> cudaVars_; // CUDA variables
};


// Example usage
int main()
{

    // mulVariables
    // {
    //     manager.addVariable("a", "0000000011110000000000000000000000000000111100000000000000000000");
    //     std::cout << "a : " << manager.exportCudaVariable("a") << std::endl;
        
    //     manager.addVariable("b", "0000000000000000000000000000000000000000000000000000000000000010");
    //     std::cout << "b : " << manager.exportCudaVariable("b") << std::endl;
        
    //     manager.mulVariables("c", "a", "b");
    //     std::cout << "c : " << manager.exportCudaVariable("c") << std::endl;        
    // }

    // {
    //     // 64bit
    //     uint32_t fullKeySizeBits = 64;
    //     uint32_t fullKeySizeBytes = fullKeySizeBits * 8;
    //     uint32_t halfKeySizeBytes = fullKeySizeBytes / 2;

    //     // Create and manage host variable and cudaVar
    //     CudaVariableManager manager(fullKeySizeBits);
    //     // rsaEncrypt
    //     manager.addVariable("Modulus",      "0000000000000000000000000000000000000001000010100110110110111111");
    //     // std::cout << "Modulus: " << manager.exportCudaVariable("Modulus") << std::endl;

    //     manager.addVariable("Exponent",     "00000000000000010000000000000001", 32);
    //     // std::cout << "Exponent: " << manager.exportCudaVariable("Exponent") << std::endl;

    //     manager.addVariable("PrimeP",       "00000000000000000001001101000011", halfKeySizeBytes / 8);
    //     // std::cout << "PrimeP: " << manager.exportCudaVariable("PrimeP") << std::endl;

    //     manager.addVariable("PrimeQ",       "00000000000000000000110111010101", halfKeySizeBytes / 8);
    //     // std::cout << "PrimeQ: " << manager.exportCudaVariable("PrimeQ") << std::endl;

    //     manager.addVariable("DP",           "00000000000000000000010000100111", halfKeySizeBytes / 8);
    //     // std::cout << "DP: " << manager.exportCudaVariable("DP") << std::endl;

    //     manager.addVariable("DQ",           "00000000000000000000000001110001", halfKeySizeBytes / 8);
    //     // std::cout << "DQ: " << manager.exportCudaVariable("DQ") << std::endl;

    //     manager.addVariable("CoefficientP", "0000000000000000000000000000000000000000111010000001111001101000");
    //     // std::cout << "CoefficientP: " << manager.exportCudaVariable("CoefficientP") << std::endl;

    //     manager.addVariable("CoefficientQ", "0000000000000000000000000000000000000000001000100100111101011000");
    //     // std::cout << "CoefficientQ: " << manager.exportCudaVariable("CoefficientQ") << std::endl;
        
    //     manager.addVariable("plaintext",    "0101010101010101010101010101010101010101010101010101010101010101");
    //     std::cout << "plaintext : " << manager.exportCudaVariable("plaintext") << std::endl;

    //     manager.rsaEncrypt("ciphertext", "plaintext", "Exponent", "Modulus");
    //     std::cout << "ciphertext : " << manager.exportCudaVariable("ciphertext") << std::endl;

    //     manager.rsaDecrypt("plaintext","ciphertext","PrimeP","PrimeQ","DP","DQ","CoefficientP","CoefficientQ","Modulus");
    //     std::cout << "plaintext : " << manager.exportCudaVariable("plaintext") << std::endl;
    // }


    {
        // 2048bit
        uint32_t fullKeySizeBits = 2048;
        uint32_t fullKeySizeBytes = fullKeySizeBits * 8;
        uint32_t halfKeySizeBytes = fullKeySizeBytes / 2;

        // Create and manage host variable and cudaVars
        CudaVariableManager manager(fullKeySizeBits);
        // rsaEncrypt

        manager.addVariable("Modulus
        );
        manager.addVariable("Exponent
        );
        manager.addVariable("Prime
        , halfKeySizeBytes / 8);

        manager.addVariable("Prime
        , halfKeySizeBytes / 8);

        manager.addVariable
        , halfKeySizeBytes / 8);

        manager.addVariable
        , halfKeySizeBytes / 8);

        manager.addVariable("Coefficient
        );
        manager.addVariable("Coefficient
        );
        
        manager.addVariable("plaintext
        std::cout << "plaintext : " << manager.exportCudaVariable("plaintext") << std::endl;
        
        manager.rsaEncrypt("ciphertext", "plaintext", "Exponent", "Modulus");
        std::cout << "ciphertext : " << manager.exportCudaVariable("ciphertext") << std::endl;

        auto startTime = wallclock();
        int totalMessages = 1000;
        for (size_t i = 0; i < totalMessages; i++)
        {
            manager.rsaDecrypt("decrypttext","ciphertext","PrimeP","PrimeQ","DP","DQ","CoefficientP","CoefficientQ","Modulus");  
            manager.removeVariable("decrypttext");
        }
        manager.rsaDecrypt("decrypttext","ciphertext","PrimeP","PrimeQ","DP","DQ","CoefficientP","CoefficientQ","Modulus");  
        std::cout << "decrypttext : " << manager.exportCudaVariable("decrypttext") << std::endl;    
        auto endTime = wallclock();
        std::cout << "Decryption time: " << endTime - startTime
              << ", " << fullKeySizeBits << "-bit throughput: "
              << (totalMessages+1) / (endTime - startTime) << " decryptions/second" << std::endl;
    }


    std::cout << "CRT RSA executed successfully" << std::endl;
    return 0;
}
